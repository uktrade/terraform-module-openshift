#cloud-config

package_update: true
package_upgrade: true

write_files:
- path: /etc/sudoers.d/99-centos-cloud-init-requiretty
  permissions: '0440'
  content: |
    Defaults:centos !requiretty
- path: /etc/aws/aws.conf
  permissions: '0644'
  content: |
    [Global]
    Zone = ${aws_region}

packages:
- bind-utils
- telnet
- vim
- epel-release
- git
- docker
- gcc
- python-devel
- openssl-devel
- iptables-services

runcmd:
- systemctl start iptables.service && iptables -F && iptables-save > /etc/sysconfig/iptables && systemctl restart iptables.service
- export AWS_DEFAULT_REGION=${aws_region}
- echo -e '${ssh_key}' > /root/.ssh/id_rsa && chmod 400 /root/.ssh/id_rsa
- yum install -y python-pip jq
- pip install --upgrade pip awscli ansible==2.2.0
- curl -fsSL "${openshift_url}" | tar -xzf - -C /usr/local/bin --strip-components 1
- >
  echo '{
    "Comment": "auto updated @ '$(date)'",
    "Changes": [
        {
          "Action": "UPSERT",
          "ResourceRecordSet": {
            "Name": "'$(curl -Lfs http://169.254.169.254/latest/meta-data/local-hostname)'",
            "Type": "A",
            "TTL": 60,
            "ResourceRecords": [{
              "Value": "'$(curl -Lfs http://169.254.169.254/latest/meta-data/local-ipv4)'"
            }]
          }
        },
        {
          "Action": "UPSERT",
          "ResourceRecordSet": {
            "Name": "nas.${openshift_domain}",
            "Type": "A",
            "TTL": 60,
            "ResourceRecords": [{
              "Value": "'$(curl -Lfs http://169.254.169.254/latest/meta-data/local-ipv4)'"
            }
          ]
        }
      }
    ]
  }' > /tmp/route53_update.json &&
  aws route53 change-resource-record-sets --hosted-zone-id ${dns_zone_id} --change-batch file:///tmp/route53_update.json
- mkdir -p /exports
- export AWS_DEFAULT_REGION=$(curl -Lfs http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}')
- AWS_AZ=$(curl -Lfs http://169.254.169.254/latest/meta-data/placement/availability-zone)
- INSTANCE_ID=$(curl -Lfs http://169.254.169.254/latest/meta-data/instance-id)
- NFS_EBS_VOLUME=$(aws ec2 describe-volumes --filters Name=status,Values=available,Name=tag:Name,Values=${cluster_id}-nfs,Name=tag:clusterid,Values=${cluster_id},Name=tag:environment,Values=${cluster_env},Name=tag:host-type,Values=nfs --query 'Volumes[?AvailabilityZone==`'"$AWS_AZ"'`]' | jq -r '.[].VolumeId')
- >
  [ $(grep -c -E vol-[0-9a-z]\{17\} <<< $NFS_EBS_VOLUME) = 1 ] && aws ec2 attach-volume --instance-id $INSTANCE_ID --volume-id $NFS_EBS_VOLUME --device /dev/xvdx
- >
  while [ "$(aws ec2 describe-volumes --volume-ids $NFS_EBS_VOLUME | jq -r '.Volumes[].Attachments[] | select(.State == "attached") .InstanceId')" != "$INSTANCE_ID" ]; do
    sleep 10
  done
- mount /dev/xvdx /exports
- git clone -b ${ansible_repo_branch} --recursive ${ansible_repo} /root/openshift-ansible
- >
  if [ $(aws ec2 describe-instances --instance-ids "`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq -r '[.AutoScalingGroups[].Instances[].InstanceId]'`" --filters Name=instance-state-name,Values=running | jq '[.Reservations[].Instances[].InstanceId] | length') -eq "$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq '.AutoScalingGroups[].DesiredCapacity')" ] && [ "$(curl -Lfs http://169.254.169.254/latest/meta-data/instance-id)" = "$(aws ec2 describe-instances --instance-ids "`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq -r '[.AutoScalingGroups[].Instances[].InstanceId]'`" --filters Name=instance-state-name,Values=running | jq -r '[.Reservations[].Instances[] | {"InstanceId": .InstanceId, "LaunchTime": .LaunchTime | sub(".000"; "") | fromdate}] | sort_by(.LaunchTime) | last .InstanceId')" ] && [ ! -f /var/run/ansible-bootstrap.lock ]; then
    cd /root/openshift-ansible &&
    ansible-playbook openshift.yml -D \
    -e cluster_id='${cluster_id}' \
    -e cluster_env='${cluster_env}' \
    -e openshift_release='${openshift_version}' \
    -e openshift_domain='${openshift_domain}' \
    -e aws_region='${aws_region}' \
    -e github_orgs='${github_org}' \
    -e github_client_id='${github_client_id}' \
    -e github_client_secret='${github_client_secret}' \
    -e aws_access_key='${aws_access_key}' \
    -e aws_secret_key='${aws_secret_key}' \
    --tags 'always' --tags 'nfs'
  fi

power_state:
  delay: "+30"
  mode: poweroff
  message: Bootstrap failed, terminating instance.
  timeout: 30
  condition: False

power_state:
  delay: "+10"
  mode: reboot
  message: Bootstrap success, reboot instance.
  timeout: 30
  condition: True
