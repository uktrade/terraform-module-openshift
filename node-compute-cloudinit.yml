#cloud-config

package_update: true
package_upgrade: true

write_files:
- path: /etc/sudoers.d/99-centos-cloud-init-requiretty
  permissions: '0440'
  content: |
    Defaults:centos !requiretty
- path: /etc/aws/aws.conf
  permissions: '0644'
  content: |
    [Global]
    Zone = ${aws_region}

packages:
- bind-utils
- telnet
- vim
- epel-release
- git
- docker
- NetworkManager
- gcc
- python-devel
- openssl-devel
- iptables-services

runcmd:
- systemctl enable NetworkManager && systemctl start NetworkManager && sleep 10
- systemctl start iptables.service && iptables -F && iptables-save > /etc/sysconfig/iptables && systemctl restart iptables.service
- export AWS_DEFAULT_REGION=${aws_region}
- echo -e '${ssh_key}' > /root/.ssh/id_rsa && chmod 400 /root/.ssh/id_rsa
- yum install -y python-pip jq
- pip install --upgrade pip awscli ansible==2.2.0 && pip install --upgrade boto
- curl -fsSL "${openshift_url}" | tar -xzf - -C /usr/local/bin --strip-components 1
- >
  echo '{
    "Comment": "auto updated @ '$(date)'",
    "Changes": [{
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "'$(curl -Lfs http://169.254.169.254/latest/meta-data/local-hostname)'",
        "Type": "A",
        "TTL": 60,
        "ResourceRecords": [{
          "Value": "'$(curl -Lfs http://169.254.169.254/latest/meta-data/local-ipv4)'"
        }]
      }
    }]
  }' > /tmp/route53_update.json &&
  aws route53 change-resource-record-sets --hosted-zone-id ${dns_zone_id} --change-batch file:///tmp/route53_update.json
- git clone -b ${ansible_repo_branch} --recursive ${ansible_repo} /root/openshift-ansible
- >
  if [ $(aws ec2 describe-instances --instance-ids "`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq -r '[.AutoScalingGroups[].Instances[].InstanceId]'`" --filters Name=instance-state-name,Values=running | jq '[.Reservations[].Instances[].InstanceId] | length') -eq "$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq '.AutoScalingGroups[].DesiredCapacity')" ] && [ "$(curl -Lfs http://169.254.169.254/latest/meta-data/instance-id)" = "$(aws ec2 describe-instances --instance-ids "`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${openshift_asg} | jq -r '[.AutoScalingGroups[].Instances[].InstanceId]'`" --filters Name=instance-state-name,Values=running | jq -r '[.Reservations[].Instances[] | {"InstanceId": .InstanceId, "LaunchTime": .LaunchTime | sub(".000"; "") | fromdate}] | sort_by(.LaunchTime) | last .InstanceId')" ] && [ ! -f /var/run/ansible-bootstrap.lock ]; then
    cd /root/openshift-ansible &&
    EC2_INI_PATH=ec2.ini \
    ansible-playbook openshift.yml -D \
    -e cluster_id='${cluster_id}' \
    -e cluster_env='${cluster_env}' \
    -e openshift_release='${openshift_version}' \
    -e openshift_domain='${openshift_domain}' \
    -e aws_region='${aws_region}' \
    -e github_orgs='${github_org}' \
    -e github_client_id='${github_client_id}' \
    -e github_client_secret='${github_client_secret}' \
    -e aws_access_key='${aws_access_key}' \
    -e aws_secret_key='${aws_secret_key}' \
    -e vpc_endpoint='${vpc_endpoint}'
    --tags 'always' --tags 'node'
  fi

power_state:
  delay: "+30"
  mode: poweroff
  message: Bootstrap failed, terminating instance.
  timeout: 30
  condition: False

power_state:
  delay: "+10"
  mode: reboot
  message: Bootstrap success, reboot instance.
  timeout: 30
  condition: True
